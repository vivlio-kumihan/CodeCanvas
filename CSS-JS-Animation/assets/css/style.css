@charset "UTF-8";

html {
  font-size: 15px;
  scroll-behavior: smooth;
}

body {
  font-family: 'Noto Sans JP', sans-serif;
  line-height: 1.7;
  color: #fff;
  background-color: #1e1e1e;
}

.container {
  max-width: 1050px;
  width: 100%;
  margin: 0 auto;
}

/* header */
header {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}
header > h1 {
  font-family: 'Work Sans', sans-serif;
  font-size: 2rem;
  line-height: 1em;
  font-weight: 900;
  letter-spacing: 1em;
  text-transform: uppercase;
  white-space: nowrap ;
}

/* article */
.article > .animation-target {
  position: relative;
  transform: translateY(20rem);
  transition: 1s;
  visibility: hidden;
  opacity: 0;
}

.article > .animation-target:not(:first-of-type) {
  margin-top: 10rem;
}

.article > .animation-target.active {
  transform: translateY(0);
  visibility: visible;
  opacity: 1;

}

.animation-target > figure {
  width: 65%;
  aspect-ratio: 4/3;
  color: #555;
  background-color: #eee;
  border-radius: .3rem;
  overflow: hidden;
}

.article > .animation-target:nth-of-type(even) > figure {
  margin-left: auto; 
}

.animation-target > figure > img {
  width: 100%;
  height: 100%;
  object-fit: contain;
  object-position: 50% 50%;
  transform: scale(1.2);
}

/* important */
.animation-target > .contents-text {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  position: absolute;
  top: 2rem;
  left: 0;
}

.animation-target:nth-of-type(odd) > .contents-text {
  right: 0;
}

.animation-target:nth-of-type(even) > .contents-text {
  align-items: flex-start;
}

.animation-target h2 {
  padding: .25em 1em;
  font-family: 'Work Sans', sans-serif;
  font-size: 3rem;
  line-height: 1em;
  font-weight: 700;
  letter-spacing: .152em;
  text-transform: capitalize;
  white-space: nowrap ;
  background-color: rgba(25, 25, 25, .8);
  border-radius: .3rem;
}

.animation-target p {
  width: calc(15px * 28);
  margin-top: 2rem;
  padding: .75em 2em;
  list-style: 1.5;
  color: #333;
  background-color: rgba(255, 255, 255, .5);
  border-radius: .3rem;
}

/* ================================================= */
/*  左右に要素をふるレイアウトを設計する際の
    基本的な考え方 */

/* 上から順番に流すレイアウト
.container   元
|_  ul       大枠
    |_  li   中枠 */

/*  基本的には上から順番に流しているレイアウト
    liをrelative, text-contentはabsoluteとして、
    この領域をフロートさせてレイアウト */

/*  動きの基準となる『li』は『width: 100%』を持たせる、または引き継がせる。
    左右に振っているように見せるのは、
    figureの幅をliより小さく設定し、block特性を使って動かす。 */
        /* li
        |_  figure          部品1  block特性
        |_  text-contents   部品2. position: absolute */

/*  text-contentsをflexBoxとする。
    親のtext-contentsは、position: absoluteで領域の位置を確保して、
    flexBoxを使って、領域横方向の位置を調整する。 */
            /* text-contents
            |_ h2
            |_ p */

.container.two {
  margin-top: 30vh;
  font-size: 1rem;
  line-height: 1em;
  text-transform: uppercase;
  color: #333;
  background-color: #eee;
}

.container.two li {
  position: relative;
}

.container.two li:not(:first-of-type) {
  margin-top: 5rem;
}

/*  『左右にふって見せる』ために見出し的に扱える画像の幅を
    『li』より小さくして使う。 */
.container.two figure {
  width: 70%;
  aspect-ratio: 4/3;
  overflow: hidden;
}

/* block特性を使って、偶数の『li』を右揃えする。 */
.container.two li:nth-of-type(even) > figure {
  margin-left: auto;
}

/* いつものimgの設定 */
.container.two img {
  width: 100%;
  height: 100%;
  object-fit: contain;
  object-position: 50% 50%;
  transform: scale(1.3);
}

.container.two li article {
  display: flex;
  flex-direction: column;
  align-items: flex-start;

  position: absolute;
  top: 2rem;
  left: 0;
}

.container.two li:nth-of-type(odd) article {
  align-items: flex-end;
  right: 0;
}

article > h2 {
  padding: 0.25rem 1rem;
  font-size: 4rem;
  font-weight: 900;
  line-height: 1em;
  letter-spacing: .2rem;
  color: #fff;
  background-color: #333;
}

article > p {
  width: calc(1rem * 20);
  margin-top: 1rem;
  padding: 1rem;
  font-size: 1rem;
  line-height: 1.7;
  background-color: #ccc;
}